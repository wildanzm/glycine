# Generated by Django 5.2.5 on 2025-08-21 12:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_uuid', models.CharField(help_text='Unique hardware identifier, e.g., MAC address or a custom UUID.', max_length=100, unique=True)),
                ('name', models.CharField(help_text="A user-friendly name for easy identification, e.g., 'West Field Sensor'.", max_length=255)),
                ('status', models.CharField(default='offline', help_text="The last reported status of the device, e.g., 'online', 'offline'.", max_length=50)),
                ('battery_level', models.IntegerField(blank=True, help_text='The last reported battery level percentage (0-100).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the device was first registered in the system.')),
            ],
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the data was received by the server.')),
                ('air_temperature', models.FloatField(blank=True, help_text='Air temperature in Celsius.', null=True)),
                ('air_humidity', models.FloatField(blank=True, help_text='Relative air humidity as a percentage.', null=True)),
                ('soil_moisture', models.FloatField(blank=True, help_text='Soil moisture as a percentage.', null=True)),
                ('soil_ph', models.FloatField(blank=True, help_text='Soil pH level (0-14).', null=True)),
                ('wind_speed', models.FloatField(blank=True, help_text='Wind speed in km/h.', null=True)),
                ('wind_direction', models.CharField(blank=True, help_text='e.g., N, NE, SW.', max_length=50, null=True)),
                ('nitrogen', models.FloatField(blank=True, help_text='Soil Nitrogen (N) level.', null=True)),
                ('phosphorus', models.FloatField(blank=True, help_text='Soil Phosphorus (P) level.', null=True)),
                ('potassium', models.FloatField(blank=True, help_text='Soil Potassium (K) level.', null=True)),
                ('rainfall', models.FloatField(blank=True, help_text='Rainfall in mm since the last reading.', null=True)),
                ('device', models.ForeignKey(help_text='The device that this reading originated from.', on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='core.device')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['device', 'timestamp'], name='core_sensor_device__30fb63_idx')],
            },
        ),
    ]
